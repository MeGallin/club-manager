{"version":3,"file":"static/js/377.8dcd9324.chunk.js","mappings":"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","sources":["components/PrivateMessages/AdminDeletePrivateMessageComponent/AdminDeletePrivateMessageComponent.jsx","components/PrivateMessages/AdminEditPrivateMessageComponent/AdminEditPrivateMessageComponent.jsx","components/PrivateMessages/AdminGetPrivateMessagesComponent/AdminGetPrivateMessagesComponent.jsx","views/AdminView/AdminPrivateMessagesView.jsx"],"sourcesContent":["import { useSelector, useDispatch } from 'react-redux';\n\nimport { adminDeletePrivateMessageAction } from '../../../store/actions/adminPrivateMessagesActions';\n\nimport ButtonComponent from '../../Button/ButtonComponent';\nimport SpinnerComponent from '../../Spinner/SpinnerComponent';\nimport SuccessComponent from '../../Success/SuccessComponent';\nimport ErrorComponent from '../../ErrorComponent/ErrorComponent';\nimport ModalComponent from '../../ModalComponent/ModalComponent';\n\nconst AdminDeletePrivateMessageComponent = ({ messageId }) => {\n  const dispatch = useDispatch();\n  const handleMessageDelete = () => {\n    if (messageId) {\n      dispatch(adminDeletePrivateMessageAction(messageId));\n    }\n  };\n\n  const adminDeletePrivateMessage = useSelector(\n    (state) => state.adminDeletePrivateMessage,\n  );\n  const { loading, success, error } = adminDeletePrivateMessage;\n  return (\n    <>\n      {error ? <ErrorComponent error={error} /> : null}\n      {success ? (\n        <SuccessComponent message=\"Message was successfully deleted\" />\n      ) : null}\n\n      {loading ? (\n        <SpinnerComponent />\n      ) : (\n        <>\n          <ModalComponent\n            className=\"create-btn\"\n            openButtonTitle=\"Delete Message\"\n            closeButtonTitle=\"No thanks\"\n            variant=\"danger\"\n            props={\n              <>\n                <div>\n                  <h3>\n                    By deleting this you are removing all records of\n                    correspondence between you and the this user. Are you sure?\n                  </h3>\n                </div>\n                <ButtonComponent\n                  type=\"submit\"\n                  text=\"Yes, Delete Message\"\n                  variant=\"danger\"\n                  disabled={false}\n                  onClick={handleMessageDelete}\n                />\n              </>\n            }\n          />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default AdminDeletePrivateMessageComponent;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { adminEditPrivateMessageAction } from '../../../store/actions/adminPrivateMessagesActions';\n\nimport InputComponent from '../../../components/Input/InputComponent';\nimport ButtonComponent from '../../../components/Button/ButtonComponent';\nimport ErrorComponent from '../../ErrorComponent/ErrorComponent';\nimport SuccessComponent from '../../Success/SuccessComponent';\n\nimport { nameRegEx } from '../../../utils/regEx';\nimport TextAreaComponent from '../../TextArea/TextAreaComponent';\nimport SpinnerComponent from '../../Spinner/SpinnerComponent';\n\nconst AdminEditPrivateMessageComponent = ({ messageId }) => {\n  const dispatch = useDispatch();\n\n  const adminGetPrivateMessages = useSelector(\n    (state) => state.adminGetPrivateMessages,\n  );\n  const { messages } = adminGetPrivateMessages;\n\n  const filteredMessage = messages?.filter((message) => {\n    if (message?._id === messageId) {\n      return message;\n    } else {\n      return false;\n    }\n  });\n\n  const [formData, setFormData] = useState({\n    title: filteredMessage[0].title,\n    message: filteredMessage[0].message,\n    from: filteredMessage[0].from,\n  });\n\n  const { title, message, from } = formData;\n\n  const handleOnChange = (e) => {\n    setFormData((previousState) => ({\n      ...previousState,\n      [e.name]: e.value,\n    }));\n  };\n\n  const handleEditPrivateMessageSubmit = (e) => {\n    e.preventDefault();\n    //Dispatch your CREATE action\n    dispatch(adminEditPrivateMessageAction(formData, messageId));\n    setFormData({\n      title: '',\n      message: '',\n      from: '',\n    });\n  };\n\n  const adminEditPrivateMessage = useSelector(\n    (state) => state.adminEditPrivateMessage,\n  );\n  const { loading, error, success } = adminEditPrivateMessage;\n\n  return (\n    <>\n      {error ? <ErrorComponent error={error} /> : null}\n      {success ? (\n        <SuccessComponent message={'Message was successfully updated.'} />\n      ) : null}\n      {loading ? (\n        <SpinnerComponent />\n      ) : (\n        <fieldset className=\"fieldSet\">\n          <legend>Edit Private message</legend>\n          <div>\n            <form onSubmit={handleEditPrivateMessageSubmit}>\n              <InputComponent\n                label=\"TITLE\"\n                value={title}\n                type=\"text\"\n                name=\"title\"\n                required\n                className={!nameRegEx.test(title) ? 'invalid' : 'entered'}\n                error={\n                  !nameRegEx.test(title) && title.length !== 0\n                    ? `Name must contain at least 5 characters`\n                    : null\n                }\n                onChange={(e) => handleOnChange(e.target)}\n              />\n\n              <TextAreaComponent\n                label=\"Message\"\n                id=\"message\"\n                name=\"message\"\n                value={message}\n                error={\n                  message.length <= 15 && message?.length !== 0\n                    ? `Description must contain at least 16 characters`\n                    : null\n                }\n                onChange={(e) => handleOnChange(e.target)}\n              />\n\n              <InputComponent\n                label=\"From\"\n                value={from}\n                type=\"text\"\n                name=\"from\"\n                required\n                className={!nameRegEx.test(from) ? 'invalid' : 'entered'}\n                error={\n                  !nameRegEx.test(from) && from?.length !== 0\n                    ? `Please choose a number between 1 and 100`\n                    : null\n                }\n                onChange={(e) => handleOnChange(e.target)}\n              />\n\n              <ButtonComponent\n                type=\"submit\"\n                text={\n                  !nameRegEx.test(from) || message.length <= 15\n                    ? 'Disabled'\n                    : 'submit'\n                }\n                variant=\"primary\"\n                disabled={!nameRegEx.test(from) || message.length <= 15}\n              />\n            </form>\n          </div>\n        </fieldset>\n      )}\n    </>\n  );\n};\n\nexport default AdminEditPrivateMessageComponent;\n","import { useEffect, useState } from 'react';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './AdminGetPrivateMessagesComponent.scss';\nimport { FaThumbsUp, FaThumbsDown } from 'react-icons/fa';\n\nimport {\n  adminGetPrivateMessagesAction,\n  adminIsCompletePrivateMessageAction,\n} from '../../../store/actions/adminPrivateMessagesActions';\n\nimport ErrorComponent from '../../ErrorComponent/ErrorComponent';\nimport SpinnerComponent from '../../Spinner/SpinnerComponent';\nimport ButtonComponent from '../../Button/ButtonComponent';\nimport SearchComponent from '../../SearchComponent/SearchComponent';\nimport SearchHighlightComponent from '../../SearchHighlightComponent/SearchHighlightComponent';\nimport moment from 'moment';\nimport ModalComponent from '../../ModalComponent/ModalComponent';\nimport AdminDeletePrivateMessageComponent from '../AdminDeletePrivateMessageComponent/AdminDeletePrivateMessageComponent';\nimport AdminEditPrivateMessageComponent from '../AdminEditPrivateMessageComponent/AdminEditPrivateMessageComponent';\n\nconst AdminGetPrivateMessagesComponent = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const userAdminDetails = useSelector((state) => state.userAdminDetails);\n  const { userAdmin } = userAdminDetails;\n\n  useEffect(() => {\n    let ignore = false;\n    if (!userInfo && !userAdmin?.isAdmin) {\n      navigate('/login');\n    } else {\n      if (!ignore) dispatch(adminGetPrivateMessagesAction());\n    }\n    return () => (ignore = true);\n  }, [navigate, dispatch, userInfo, userAdmin]);\n\n  const adminGetPrivateMessages = useSelector(\n    (state) => state.adminGetPrivateMessages,\n  );\n  const { loading, success, error, messages } = adminGetPrivateMessages;\n\n  //Search Message by to [name]\n  const [keyword, setKeyword] = useState('');\n  const handleSearch = (e) => {\n    setKeyword(e.target.value);\n  };\n  const searchedMessages = messages?.filter((message) => {\n    return message.to.toLowerCase().includes(keyword.toLowerCase());\n  });\n  //Search Message by [name]\n  const handleIsComplete = (val, userId, messageId) => {\n    dispatch(adminIsCompletePrivateMessageAction(val, userId, messageId));\n  };\n\n  const adminIsCompletePrivateMessage = useSelector(\n    (state) => state.adminIsCompletePrivateMessage,\n  );\n  const {\n    loading: isCompleteLoading,\n    error: isCompleteError,\n    success: isCompleteSuccess,\n  } = adminIsCompletePrivateMessage;\n\n  return (\n    <>\n      {error ? <ErrorComponent error={error} /> : null}\n      {isCompleteError ? <ErrorComponent error={isCompleteError} /> : null}\n\n      {loading || isCompleteLoading ? (\n        <SpinnerComponent />\n      ) : (\n        <>\n          {success || (isCompleteSuccess && searchedMessages) ? (\n            <>\n              <h2>Manage Private Messages</h2>\n              <div className=\"admin-get-player__top-wrapper\">\n                <SearchComponent\n                  placeholder=\"SEARCH NAME\"\n                  value={keyword}\n                  onChange={handleSearch}\n                  quantity={searchedMessages.length}\n                  total={messages.length}\n                />\n\n                <ButtonComponent\n                  type=\"button\"\n                  text={\n                    <NavLink\n                      className={(navData) =>\n                        navData.isActive ? 'active' : ''\n                      }\n                      to=\"/admin-profile\"\n                    >\n                      Go Back\n                    </NavLink>\n                  }\n                  variant=\"info\"\n                  disabled={false}\n                />\n              </div>\n\n              <div className=\"wrapper\">\n                {searchedMessages?.map((message) => (\n                  <div key={message?._id} className=\"inner-content-wrapper\">\n                    <fieldset className=\"fieldSet\">\n                      <legend>\n                        <SearchHighlightComponent\n                          value={`TO: ${message?.to}`}\n                          keyword={keyword}\n                        />\n                      </legend>\n                      <div className=\"message-wrapper\">\n                        {message.isComplete ? (\n                          <div\n                            onClick={() =>\n                              handleIsComplete(\n                                false,\n                                message?.user,\n                                message?._id,\n                              )\n                            }\n                          >\n                            <div className=\"is-complete-wrapper\">\n                              <p className=\"small-text danger\">\n                                Un-Mark as Complete\n                              </p>\n                              <FaThumbsDown className=\"ra-thumbs-down\" />\n                            </div>\n                          </div>\n                        ) : (\n                          <div\n                            onClick={() =>\n                              handleIsComplete(\n                                true,\n                                message?.user,\n                                message?._id,\n                              )\n                            }\n                          >\n                            <div className=\"is-complete-wrapper\">\n                              <p className=\"small-text warning\">\n                                Mark as Complete\n                              </p>\n                              <FaThumbsUp className=\"ra-thumbs-up\" />\n                            </div>\n                          </div>\n                        )}\n\n                        <h3>{message?.title} </h3>\n                        <p>{message?.message}</p>\n                        <p>{message?.from}</p>\n                        <sup>\n                          [posted {moment(message?.createdAt).fromNow()}]\n                        </sup>\n                      </div>\n\n                      <ModalComponent\n                        className=\"create-btn\"\n                        openButtonTitle=\"EDIT\"\n                        closeButtonTitle=\"Close\"\n                        variant=\"warning\"\n                        props={\n                          <>\n                            <AdminEditPrivateMessageComponent\n                              messageId={message?._id}\n                            />\n                          </>\n                        }\n                      />\n                      <AdminDeletePrivateMessageComponent\n                        messageId={message?._id}\n                      />\n\n                      {message?.privateMessageReply.map((reply) => (\n                        <div key={reply?._id} className=\"reply-wrapper\">\n                          <h4>Reply:</h4>\n\n                          <h3>{reply?.title} </h3>\n                          <p>{reply?.to}</p>\n                          <p>{reply?.message}</p>\n                          <p>{reply?.from}</p>\n                          <sup>\n                            [posted {moment(reply?.createdAt).fromNow()}]\n                          </sup>\n                        </div>\n                      ))}\n                    </fieldset>\n                  </div>\n                ))}\n              </div>\n            </>\n          ) : null}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default AdminGetPrivateMessagesComponent;\n","import React from 'react';\nimport AdminGetPrivateMessagesComponent from '../../components/PrivateMessages/AdminGetPrivateMessagesComponent/AdminGetPrivateMessagesComponent';\n\nconst AdminPrivateMessagesView = () => {\n  return <AdminGetPrivateMessagesComponent />;\n};\n\nexport default AdminPrivateMessagesView;\n"],"names":["messageId","dispatch","useDispatch","adminDeletePrivateMessage","useSelector","state","loading","success","error","ErrorComponent","SuccessComponent","message","SpinnerComponent","ModalComponent","className","openButtonTitle","closeButtonTitle","variant","props","ButtonComponent","type","text","disabled","onClick","adminDeletePrivateMessageAction","messages","adminGetPrivateMessages","filteredMessage","filter","_id","useState","title","from","formData","setFormData","handleOnChange","e","previousState","name","value","adminEditPrivateMessage","onSubmit","preventDefault","adminEditPrivateMessageAction","InputComponent","label","required","nameRegEx","length","onChange","target","TextAreaComponent","id","navigate","useNavigate","userInfo","userLogin","userAdmin","userAdminDetails","useEffect","ignore","isAdmin","adminGetPrivateMessagesAction","keyword","setKeyword","searchedMessages","to","toLowerCase","includes","handleIsComplete","val","userId","adminIsCompletePrivateMessageAction","adminIsCompletePrivateMessage","isCompleteLoading","isCompleteError","isCompleteSuccess","SearchComponent","placeholder","quantity","total","navData","isActive","map","SearchHighlightComponent","isComplete","user","moment","createdAt","fromNow","privateMessageReply","reply"],"sourceRoot":""}